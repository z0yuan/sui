searchState.loadedDescShard("sui_indexer_alt_reader", 0, "A reader backed by BigTable KV store.\nCreate a data loader backed by this reader.\nTime spent waiting for a request to Bigtable to complete, …\nGet the summary for the latest checkpoint known to …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreate a new reader, talking to the Bigtable instance with …\nKey for fetching a checkpoint’s content by its sequence …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nKey for fetching the  of a CoinMetadata object, based on …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nKey for fetching a Display object by the type it …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\n<code>ToString::to_string</code>, but without panic on OOM.\nKey for fetching information about the latest epoch to …\nKey for fetching information about the end of an epoch …\nKey for fetching information about the start of an epoch.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\n<code>ToString::to_string</code>, but without panic on OOM.\nA loader for point lookups in kv stores backed by either …\nA wrapper for the contents of a transaction, either from …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nKey for fetching the latest version of an object, as of a …\nKey for fetching the latest version of an object. If the …\nKey for fetching the latest version of an object, with an …\nKey for fetching a StoredObjVersion by its ID and version …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\n<code>ToString::to_string</code>, but without panic on OOM.\nKey for fetching the contents a particular version of an …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nKey for fetching the latest version of a package, based on …\nKey for fetching the original ID of a package\nKey for fetching a package by its original ID and version.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\n<code>ToString::to_string</code>, but without panic on OOM.\nThis wrapper type exists to perform error conversion …\nCreate a data loader backed by this reader.\nAcquire a connection to the database. This can potentially …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreate a new database reader. If <code>database_url</code> is <code>None</code>, the …\nBackground task responsible for evicting system package …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nStart a new task that regularly polls the database for the …\nKey for fetching transaction contents (TransactionData, …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nKey for fetching a transaction’s balance changes by …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nKey for fetching a transaction’s digest by its sequence …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.")