searchState.loadedDescShard("sui_replay_2", 0, "Enum around rpc gql endpoints.\nArguments to the replay tool. It allows to replay a single …\nAn implementation of the replay interfaces: …\nTransaction digest to replay.\nFile containing a list of digest, one per line.\nExecution module for replay. The call to the executor …\nReturns the argument unchanged.\nReturns the argument unchanged.\nGQL Queries Interface to the rpc for the gql schema …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nRPC of the fullnode used to replay the transaction.\nLogical stores needed by the replay tool. Those stores are …\nThis module contains the logic to use transaction data and …\nShow transaction effects.\nProvide a directory to collect tracing. Or defaults to …\nTracing utilities. Mostly deals with directory/file saving …\nVerify transaction execution matches what was executed on …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nEpoch data required to reaplay a transaction.\nAn <code>EpochStore</code> retrieves the epoch data and protocol …\nQuery for an object. Specifies an <code>ObjectID</code> and the rule to …\nA pasthrough query request for a store that can execute a …\nA <code>TransactionStore</code> has to be able to retrieve transaction …\nQuery options for an object. <code>Version</code> request an object at …\nReturn the <code>EpochData</code> for a given epoch.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturn the <code>ProtocolConfig</code> for a given epoch.\nGiven transaction digest, return <code>TransactionData</code>, …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nGets the path to store trace output (either the default …\nSaves the trace and additional metadata needed to analyze …")